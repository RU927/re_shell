# .zshrc
# Author: Piotr Karbowski <piotr.karbowski@gmail.com>
# License: beerware.

# Basic zsh config.

# Set the "umask" (see "man umask"):
# ie read and write for the owner only.
# umask 002 # relaxed   -rwxrwxr-x
# umask 022 # cautious  -rwxr-xr-x
# umask 027 # uptight   -rwxr-x---
# umask 077 # paranoid  -rwx------
# umask 066 # bofh-like -rw-------
umask 066

# If root set unmask to 022 to prevent new files being created group and world writable
if (( EUID == 0 )); then
    umask 113
fi

ZDOTDIR=${ZDOTDIR:-${HOME}}
# ZSHDDIR="${HOME}/.config/zsh"
ZSHDDIR="${ZDOTDIR}/.zsh"
HISTFILE="${ZDOTDIR}/.zsh_history"
HISTSIZE='128000'
SAVEHIST='128000'

# Le features!
# extended globbing, awesome!
setopt extendedGlob

# zmv -  a command for renaming files by means of shell patterns.
autoload -U zmv

# zargs, as an alternative to find -exec and xargs.
autoload -U zargs

# Turn on command substitution in the prompt (and parameter expansion and arithmetic expansion).
setopt promptsubst

# Prevent insert key from changing input mode.
# (switch to Emacs mode)
bindkey -e
# bindkey -v

# Control-x-e to open current line in $EDITOR, awesome when writting functions or editing multiline commands.
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line


# Completion.
autoload -Uz compinit
compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion:*:descriptions' format '%U%F{YELLOW}%d%f%u'

# If running as root and nice >0, renice to 0.
if [ "$USER" = 'root' ] && [ "$(cut -d ' ' -f 19 /proc/$$/stat)" -gt 0 ]; then
    renice -n 0 -p "$$" && echo "# Adjusted nice level for current shell to 0."
fi

## Стек Каталогов
DIRSTACKFILE="$HOME/.cache/zsh/dirs"
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  [[ -d $dirstack[1] ]] && cd $dirstack[1]
fi
chpwd() {
  print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
}

DIRSTACKSIZE=20
# Сохранение истории `cd` в составе `pushd` и обеспечение работы `cd -<TAB>`
setopt auto_pushd pushdsilent pushdtohome
## Удалить повторяющиеся записи
setopt pushd_ignore_dups
## Это Отменяет +/- операторы.
setopt pushd_minus

bindkey -s "q\t" "cd -\t"

# Игнорировать записи с префиксом '#'.
setopt interactivecomments
# Игнорируйте дубликаты в истории.
setopt hist_ignore_dups
# Запрет записи в истории, если перед ней есть пробелы.
setopt hist_ignore_space

# Nobody need flow control anymore. Проблемная функция.
#stty -ixon
setopt noflowcontrol

# Keys.
case "${TERM}" in
    st|st-*)
        bindkey "^[[H" beginning-of-line #Home key
        bindkey "^[[4~" end-of-line #End key
        bindkey "^[[P" delete-char #Del key
        bindkey "^[[A" history-beginning-search-backward #Up Arrow
        bindkey "^[[B" history-beginning-search-forward #Down Arrow
        bindkey "^[[1;5C" forward-word # control + right arrow
        bindkey "^[[1;5D" backward-word # control + left arrow
        bindkey "^H" backward-kill-word # control + backspace
        bindkey "^[[M" kill-word # control + delete
    ;;
    rxvt*|xterm*)
        bindkey "^E" beginning-of-line #Home key
        bindkey "^A" end-of-line #End key
        bindkey "^[[3~" delete-char #Del key
        bindkey "^[[A" history-beginning-search-backward #Up Arrow
        bindkey "^[[B" history-beginning-search-forward #Down Arrow
        bindkey "^[[1;5C" forward-word # control + right arrow
        bindkey "^[[1;5D" backward-word # control + left arrow
        bindkey "^H" backward-kill-word # control + backspace
        bindkey "^[[3;5~" kill-word # control + delete
        #plugins keys 
        # bindkey '^[[1;5A' history-substring-search-up # control + up arrow
        # bindkey '^[[1;5B' history-substring-search-down # control + down arrow
    ;;

    linux)
        bindkey "^[[1~" beginning-of-line #Home key
        bindkey "^[[4~" end-of-line #End key
        bindkey "^[[3~" delete-char #Del key
        bindkey "^[[A" history-beginning-search-backward
        bindkey "^[[B" history-beginning-search-forward
    ;;

    screen|screen-*)
        bindkey "^[[1~" beginning-of-line #Home key
        bindkey "^[[4~" end-of-line #End key
        bindkey "^[[3~" delete-char #Del key
        bindkey "^[[A" history-beginning-search-backward #Up Arrow
        bindkey "^[[B" history-beginning-search-forward #Down Arrow
        bindkey "^[Oc" forward-word # control + right arrow
        bindkey "^[OC" forward-word # control + right arrow
        bindkey "^[Od" backward-word # control + left arrow
        bindkey "^[OD" backward-word # control + left arrow
        bindkey "^H" backward-kill-word # control + backspace
        bindkey "^[[3^" kill-word # control + delete
    ;;
esac
#принимает несколько слов или их частей (слово*ово)  
bindkey "^R" history-incremental-pattern-search-backward 
bindkey "^S" history-incremental-pattern-search-forward

# if [ -f ~/.alert ]; then echo '>>> Check ~/.alert'; fi

#plugins
if (( $+commands[sheldon] )); then              # только для zsh
   eval "$(sheldon source)"
fi

if (( $+commands[atuin] )); then
  eval "$(atuin init zsh)"
fi

if (( $+commands[navi] )); then
  eval "$(navi widget zsh)"
fi

